/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
	"k8s.io/client-go/kubernetes/scheme"
	rest "k8s.io/client-go/rest"
)

type CoreV1Interface interface {
	RESTClient() rest.Interface
	ComponentStatusesGetter
	ScopedComponentStatusesGetter
	ConfigMapsGetter
	ScopedConfigMapsGetter
	EndpointsGetter
	ScopedEndpointsGetter
	EventsGetter
	ScopedEventsGetter
	LimitRangesGetter
	ScopedLimitRangesGetter
	NamespacesGetter
	ScopedNamespacesGetter
	NodesGetter
	ScopedNodesGetter
	PersistentVolumesGetter
	ScopedPersistentVolumesGetter
	PersistentVolumeClaimsGetter
	ScopedPersistentVolumeClaimsGetter
	PodsGetter
	ScopedPodsGetter
	PodTemplatesGetter
	ScopedPodTemplatesGetter
	ReplicationControllersGetter
	ScopedReplicationControllersGetter
	ResourceQuotasGetter
	ScopedResourceQuotasGetter
	SecretsGetter
	ScopedSecretsGetter
	ServicesGetter
	ScopedServicesGetter
	ServiceAccountsGetter
	ScopedServiceAccountsGetter
}

// CoreV1Client is used to interact with features provided by the  group.
type CoreV1Client struct {
	restClient rest.Interface
	scope      rest.Scope
}

func (c *CoreV1Client) ComponentStatuses() ComponentStatusInterface {
	return newComponentStatuses(c, c.scope)
}

func (c *CoreV1Client) ScopedComponentStatuses(scope rest.Scope) ComponentStatusInterface {
	return newComponentStatuses(c, scope)
}

func (c *CoreV1Client) ConfigMaps(namespace string) ConfigMapInterface {
	return newConfigMaps(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedConfigMaps(scope rest.Scope) ConfigMapsGetter {
	return newConfigMapsScoper(c, scope)
}

func (c *CoreV1Client) Endpoints(namespace string) EndpointsInterface {
	return newEndpoints(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedEndpoints(scope rest.Scope) EndpointsGetter {
	return newEndpointsScoper(c, scope)
}

func (c *CoreV1Client) Events(namespace string) EventInterface {
	return newEvents(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedEvents(scope rest.Scope) EventsGetter {
	return newEventsScoper(c, scope)
}

func (c *CoreV1Client) LimitRanges(namespace string) LimitRangeInterface {
	return newLimitRanges(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedLimitRanges(scope rest.Scope) LimitRangesGetter {
	return newLimitRangesScoper(c, scope)
}

func (c *CoreV1Client) Namespaces() NamespaceInterface {
	return newNamespaces(c, c.scope)
}

func (c *CoreV1Client) ScopedNamespaces(scope rest.Scope) NamespaceInterface {
	return newNamespaces(c, scope)
}

func (c *CoreV1Client) Nodes() NodeInterface {
	return newNodes(c, c.scope)
}

func (c *CoreV1Client) ScopedNodes(scope rest.Scope) NodeInterface {
	return newNodes(c, scope)
}

func (c *CoreV1Client) PersistentVolumes() PersistentVolumeInterface {
	return newPersistentVolumes(c, c.scope)
}

func (c *CoreV1Client) ScopedPersistentVolumes(scope rest.Scope) PersistentVolumeInterface {
	return newPersistentVolumes(c, scope)
}

func (c *CoreV1Client) PersistentVolumeClaims(namespace string) PersistentVolumeClaimInterface {
	return newPersistentVolumeClaims(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedPersistentVolumeClaims(scope rest.Scope) PersistentVolumeClaimsGetter {
	return newPersistentVolumeClaimsScoper(c, scope)
}

func (c *CoreV1Client) Pods(namespace string) PodInterface {
	return newPods(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedPods(scope rest.Scope) PodsGetter {
	return newPodsScoper(c, scope)
}

func (c *CoreV1Client) PodTemplates(namespace string) PodTemplateInterface {
	return newPodTemplates(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedPodTemplates(scope rest.Scope) PodTemplatesGetter {
	return newPodTemplatesScoper(c, scope)
}

func (c *CoreV1Client) ReplicationControllers(namespace string) ReplicationControllerInterface {
	return newReplicationControllers(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedReplicationControllers(scope rest.Scope) ReplicationControllersGetter {
	return newReplicationControllersScoper(c, scope)
}

func (c *CoreV1Client) ResourceQuotas(namespace string) ResourceQuotaInterface {
	return newResourceQuotas(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedResourceQuotas(scope rest.Scope) ResourceQuotasGetter {
	return newResourceQuotasScoper(c, scope)
}

func (c *CoreV1Client) Secrets(namespace string) SecretInterface {
	return newSecrets(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedSecrets(scope rest.Scope) SecretsGetter {
	return newSecretsScoper(c, scope)
}

func (c *CoreV1Client) Services(namespace string) ServiceInterface {
	return newServices(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedServices(scope rest.Scope) ServicesGetter {
	return newServicesScoper(c, scope)
}

func (c *CoreV1Client) ServiceAccounts(namespace string) ServiceAccountInterface {
	return newServiceAccounts(c, c.scope, namespace)
}

func (c *CoreV1Client) ScopedServiceAccounts(scope rest.Scope) ServiceAccountsGetter {
	return newServiceAccountsScoper(c, scope)
}

// NewForConfig creates a new CoreV1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*CoreV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new CoreV1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h rest.HTTPClient) (*CoreV1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &CoreV1Client{restClient: client}, nil
}

// NewForConfigOrDie creates a new CoreV1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *CoreV1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new CoreV1Client for the given RESTClient.
func New(c rest.Interface) *CoreV1Client {
	return &CoreV1Client{restClient: c}
}

// NewWithScope creates a new CoreV1Client for the given RESTClient and scope.
func NewWithScope(c rest.Interface, scope rest.Scope) *CoreV1Client {
	return &CoreV1Client{restClient: c, scope: scope}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/api"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CoreV1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
